1. Evitar Reprocessamento de Imagens Desnecessário
No código atual, você está fazendo a conversão de cada frame para o formato RGB e redimensionando-o a cada vez que a função atualizar_video é chamada. Isso pode ser otimizado, evitando repetição desnecessária de operações.

Otimização do redimensionamento: Ao invés de redimensionar a imagem a cada frame, considere fazer isso uma vez e só atualizar o tamanho da imagem quando a janela for redimensionada.
2. Otimização do Processamento de Placas
Atualmente, a detecção de placas é realizada a cada frame, o que pode ser intensivo dependendo da resolução do vídeo e do número de placas detectadas.

Processamento com menos frequência: Em vez de detectar placas a cada frame, você pode configurar um intervalo de tempo (por exemplo, a cada 5 ou 10 frames) para realizar a detecção.
Redução de Detecção de Placas: Você pode melhorar a detecção limitando a área da imagem (ROI) onde as placas podem aparecer ou ajustando os parâmetros de detectMultiScale.
3. Uso de Threading ou Multiprocessamento
O processamento de vídeo e a interface gráfica (Tkinter) podem ser feitos em threads diferentes para evitar que a interface trave enquanto o processamento do vídeo ocorre.

Uso de Threading: Utilize a biblioteca threading para processar o vídeo e a detecção de placas em uma thread separada, deixando a interface principal (Tkinter) livre para ser atualizada sem bloqueios.
4. Melhorias na Interface (Tkinter)
A interface Tkinter também pode ser otimizada para melhorar o desempenho geral, como:

Evitar atualizações constantes da interface: Não atualize a interface com tanta frequência (50ms). Isso pode ser reduzido para algo mais suave, como 100ms ou 200ms.
Reduzir o número de objetos criados dinamicamente: A cada inserção de uma placa na Treeview, um novo item é inserido. Em vez disso, você pode fazer isso em lotes ou com verificações para não adicionar entradas repetidas.
5. Outras Sugestões
Uso de OpenCV em vez de Tesseract diretamente: Tesseract pode ser pesado, e uma alternativa seria utilizar outras técnicas de OCR mais rápidas ou uma abordagem baseada em aprendizado profundo para detecção de placas. Há APIs de reconhecimento de placas mais rápidas como OpenALPR ou outras alternativas.